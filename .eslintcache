[{"/Users/prowe/Development/webRTC-sandbox/frontend/src/index.tsx":"1","/Users/prowe/Development/webRTC-sandbox/frontend/src/reportWebVitals.ts":"2","/Users/prowe/Development/webRTC-sandbox/frontend/src/App.tsx":"3","/Users/prowe/Development/webRTC-sandbox/frontend/src/Chat.tsx":"4","/Users/prowe/Development/webRTC-sandbox/frontend/src/CryptoBox.tsx":"5","/Users/prowe/Development/webRTC-sandbox/frontend/src/Chat2.tsx":"6","/Users/prowe/Development/webRTC-sandbox/frontend/src/FabricConnection.ts":"7","/Users/prowe/Development/webRTC-sandbox/frontend/src/SignupButton.tsx":"8","/Users/prowe/Development/webRTC-sandbox/frontend/src/AsyncRTC.tsx":"9"},{"size":478,"mtime":1610851869065,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":1610850580968,"results":"12","hashOfConfig":"11"},{"size":2383,"mtime":1616811101835,"results":"13","hashOfConfig":"11"},{"size":4387,"mtime":1611284573776,"results":"14","hashOfConfig":"11"},{"size":1056,"mtime":1611801090446,"results":"15","hashOfConfig":"11"},{"size":3188,"mtime":1611883999239,"results":"16","hashOfConfig":"11"},{"size":4508,"mtime":1611884727994,"results":"17","hashOfConfig":"11"},{"size":677,"mtime":1611801728825,"results":"18","hashOfConfig":"11"},{"size":7078,"mtime":1616814607979,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"4ey3df",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/prowe/Development/webRTC-sandbox/frontend/src/index.tsx",[],["40","41"],"/Users/prowe/Development/webRTC-sandbox/frontend/src/reportWebVitals.ts",[],"/Users/prowe/Development/webRTC-sandbox/frontend/src/App.tsx",["42"],"/Users/prowe/Development/webRTC-sandbox/frontend/src/Chat.tsx",["43"],"/Users/prowe/Development/webRTC-sandbox/frontend/src/CryptoBox.tsx",["44"],"/Users/prowe/Development/webRTC-sandbox/frontend/src/Chat2.tsx",["45"],"// import SignJWT from \"jose/dist/browser/jwt/sign\";\nimport { FormEvent, useEffect, useReducer, useRef, useState } from \"react\";\nimport FabricConnection from \"./FabricConnection\";\n\nfunction statusMessagesReducer(currentMessages: string[], message: string): string[] {\n    return [message, ...currentMessages];\n}\n\nfunction payloadReducer(currentMessages: any[], message: any): any[] {\n    return [message, ...currentMessages];\n}\n\n\ninterface Envelope {\n    ttl: number;\n    payload: string;\n    publicKey: JsonWebKey;\n    signature: string;\n}\n\ninterface SendMessageFormProps {\n    keyPair: CryptoKeyPair;\n    dataChannel: RTCDataChannel;\n}\nfunction SendMessageForm({dataChannel, keyPair}: SendMessageFormProps) {\n    const [message, setMessage] = useState<string>('');\n    const [jwk, setJwk] = useState<JsonWebKey>();\n\n    useEffect(() => {\n        crypto.subtle.exportKey(\"jwk\", keyPair.publicKey)\n            .then(jwk => setJwk(jwk));\n    }, [keyPair]);\n\n    async function sendPost() {\n        const header = {\n            typ: 'JWT',\n            jwk,\n        };\n        const payload = {\n            type: 'post',\n            message\n        };\n        const encodedHeader = atob(JSON.stringify(header));\n        const encodedPayload = atob(JSON.stringify(payload));\n        const data = new TextEncoder().encode(`${encodedHeader}.${encodedPayload}`);\n        const signature = await crypto.subtle.sign(keyPair.publicKey.algorithm, keyPair.publicKey, data);\n        const signedJWT = `${encodedHeader}.${encodedPayload}.${signature}`;\n\n        // const signedJWT = await new SignJWT(payload)\n        // .setProtectedHeader({\n        //   jwk,\n        // })\n        // .sign(keyPair.privateKey);\n        console.log('Generated', signedJWT);\n        dataChannel.send(signedJWT);\n    }\n\n    function onSubmit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n        sendPost();\n    }\n\n    return (\n        <form onSubmit={onSubmit}>\n            <textarea onChange={e => setMessage(e.currentTarget.value)} value={message} />\n            <button type='submit'>Send</button>\n        </form>\n    );\n}\n\nexport interface Chat2Props {\n    keyPair: CryptoKeyPair;\n}\n\nexport default function Chat2({keyPair}: Chat2Props) {\n    const fabricConnection = useRef<FabricConnection>();\n    const [statusMessages, addStatusMessage] = useReducer(statusMessagesReducer, []);\n    const [messages, addPayload] = useReducer(payloadReducer, []);\n\n    useEffect(() => {\n        fabricConnection.current = new FabricConnection({\n            bootstrapServer: 'ws://localhost:8080',\n            onStatusChange: message => addStatusMessage(message),\n            onDataChannelMessage: addPayload,\n        });\n    }, []);\n\n    const dataChannel = fabricConnection.current?.dataChannel;\n\n    return (\n        <section>\n            <ul>\n                {statusMessages.map((message, index) => <li key={index}>{message}</li>)}\n            </ul>\n            <ul>\n                {messages.map((message, index) => <li key={index}>{JSON.stringify(message)}</li>)}\n            </ul>\n            {dataChannel && <SendMessageForm dataChannel={dataChannel} keyPair={keyPair}/>}\n\n        </section>\n    );\n}","/Users/prowe/Development/webRTC-sandbox/frontend/src/FabricConnection.ts",[],"/Users/prowe/Development/webRTC-sandbox/frontend/src/SignupButton.tsx",[],"/Users/prowe/Development/webRTC-sandbox/frontend/src/AsyncRTC.tsx",["46","47","48"],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":58,"column":10,"nodeType":"55","messageId":"56","endLine":58,"endColumn":14},{"ruleId":"57","severity":1,"message":"58","line":88,"column":8,"nodeType":"59","endLine":88,"endColumn":10,"suggestions":"60"},{"ruleId":"53","severity":1,"message":"61","line":4,"column":12,"nodeType":"55","messageId":"56","endLine":4,"endColumn":19},{"ruleId":"53","severity":1,"message":"62","line":14,"column":11,"nodeType":"55","messageId":"56","endLine":14,"endColumn":19},{"ruleId":"53","severity":1,"message":"63","line":9,"column":10,"nodeType":"55","messageId":"56","endLine":9,"endColumn":24},{"ruleId":"53","severity":1,"message":"64","line":66,"column":12,"nodeType":"55","messageId":"56","endLine":66,"endColumn":26},{"ruleId":"53","severity":1,"message":"65","line":66,"column":28,"nodeType":"55","messageId":"56","endLine":66,"endColumn":45},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"@typescript-eslint/no-unused-vars","'App2' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onOffer'. Either include it or remove the dependency array.","ArrayExpression",["68"],"'keyPair' is assigned a value but never used.","'Envelope' is defined but never used.","'setupListeners' is defined but never used.","'receiveChannel' is assigned a value but never used.","'setReceiveChannel' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},"Update the dependencies array to be: [onOffer]",{"range":"71","text":"72"},[3099,3101],"[onOffer]"]